Анализ утилиты jmap (jmap -histo 69341) :
- При запуске, до создания объектов MemTracker занимает 13,7 МБ
- После создания 100 000 тыс. заявок MemTracker стал занимат 14,5 МБ
- После получения всех заявок (findall) куча (heap) заполнилась еще на 15,5 МБ
  и стала занимать 30,8 МБ
- После удаления 1000 тыс. заявок куча заполнилась еще 0,7 МБ и стала 31,5
- После остановки программы и повторном запуске размер кучи (heap) был занят на 13,7 МБ;

Анализ утилиты jstat (jstat -gc 68126 1s 10) (данные в терминале указывается в КБ) :
- При запуске, до создания объектов:
  S0C (вместимость выживших данных, перед стадией старения) = 4,3 МБ; S0U (занятость данной области памяти) = 0;
  S1C (вместимость выживших данных) = 4,3 МБ; S1U (занятость данной области памяти) = 0;
  EC (размер eden) = 34,9 МБ; EU (занятость eden) = 13,3 МБ;
  OC (емкость старого пространства) = 87,4 МБ; OU (занятость старого пространства) = 0;
  Остальные показатели равны 0;
- При создании 100 000 тыс заявок:
  S0C (вместимость выживших данных, перед стадией старения) = 4,3 МБ; S0U (занятость данной области памяти) = 0;
  S1C (вместимость выживших данных) = 4,3 МБ; S1U (занятость данной области памяти) = 6 КБ;
  EC (размер eden) = 34,9 МБ; EU (занятость eden) = 13,9 МБ;
  OC (емкость старого пространства) = 87,4 МБ; OU (занятость старого пространства) = 3,6 МБ;
  MС (размер метпространства) = 6 МБ; MU (заполненость метапространства) = 5,8 МБ;
  CCSC (размер пространства сжатых объектов) = 640 КБ; CCSU(заполненость CCSC) = 572 КБ;
  YGC (количество мероприятий по сборке мусора молодого поколения GC) = 9;
  YGCT (время сбора мусора моолодого поколения) = 0,064;
  FGC (количество полных сборок мусора) = 0;
  FGCT (время полной сборки мусора) = 0,000;
  GCT ( общее время сбора мусора) = 0,064;
- При получении 100 000 тыс. заявок:
  S0C (вместимость выживших данных, перед стадией старения) = 4,3 МБ; S0U (занятость данной области памяти) = 0;
  S1C (вместимость выживших данных) = 4,3 МБ; S1U (занятость данной области памяти) = 232 КБ;
  EC (размер eden) = 34,9 МБ; EU (занятость eden) = 10,3 МБ;
  OC (емкость старого пространства) = 87,4 МБ; OU (занятость старого пространства) = 36,4 МБ;
  MС (размер метпространства) = 5,8 МБ; MU (заполненость метапространства) = 5,6 МБ;
  CCSC (размер пространства сжатых объектов) = 640 КБ; CCSU(заполненость CCSC) = 572 КБ;
  YGC (количество мероприятий по сборке мусора молодого поколения GC) = 5;
  YGCT (время сбора мусора моолодого поколения) = 0,095;
  FGC (количество полных сборок мусора) = 0;
  FGCT (время полной сборки мусора) = 0,000;
  GCT ( общее время сбора мусора) = 0,095;
- При удалении 100 000 тыс. заявок:
  S0C (вместимость выживших данных, перед стадией старения) = 4,3 МБ; S0U (занятость данной области памяти) = 2,5 МБ;
  S1C (вместимость выживших данных) = 4,3 МБ; S1U (занятость данной области памяти) = 0 КБ;
  EC (размер eden) = 34,9 МБ; EU (занятость eden) = 24,8 МБ;
  OC (емкость старого пространства) = 87,4 МБ; OU (занятость старого пространства) = 30,8 МБ;
  MС (размер метпространства) = 5,9 МБ; MU (заполненость метапространства) = 5,8 МБ;
  CCSC (размер пространства сжатых объектов) = 640 КБ; CCSU(заполненость CCSC) = 562 КБ;
  YGC (количество мероприятий по сборке мусора молодого поколения GC) = 12;
  YGCT (время сбора мусора молодого поколения) = 0,115;
  FGC (количество полных сборок мусора) = 0;
  FGCT (время полной сборки мусора) = 0,000;
  GCT ( общее время сбора мусора) = 0,115;

Анализ утилиты jconsole (jconsole):
- При запуске, до создания объекта:
eden space занят на 1,4 Мб из 559 МБ
survivor space использует 0 КБ из 70 МБ
tenured gen 0 КБ из 1 ГБ 398 Мб
- При создании, 100 000 заявок:
eden space занят на 21 МБ из 559 МБ, но при этом была произведена сборка мусора;
survivor space используется 144 КБ из 70 МБ;
tenured gen используется 4,7 МБ из 1 ГБ 398 МБ;
- При получении 100 000 заявок:
eden space занят на 26 МБ из 35 МБ;
survivor space используется 11 КБ из 70 МБ, но при этом была произведена сборка мусора;
tenured gen используется 35 МБ 1 ГБ 398 МБ;
- При удалении 100 000 заявок:
  eden space (график запрыгал с 27 МБ до 6 МБ и сразу же поднялся до 28 МБ и постепенно пошел вверх) из 35 МБ;
  survivor space (подскочил до 4,3 МБ после чего опустился до 3,1 МБ, и спустя пару минут опустился к 14 КБ) из 70 МБ;
  tenured gen поднялся до 64 МБ из  1 ГБ 398 МБ;


Попробовать добиться состояния выхода за пределы памяти и посмотреть состояние виртуальной машины.

- Выставил размер хипа 5 МБ( -Xmx5m -Xms5m) и создал запрос на создание 1 000 000 заявок.
Данного размера хватило только на 82 506 заявок, после чего идея выкинула исклчение
о нехватки памяти (Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread "main").
И jconsole при это отсоединяется

